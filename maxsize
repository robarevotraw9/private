import functools
import time

def timed_lru_cache(seconds: int, maxsize: int = 128):
    def decorator(func):
        cache = functools.lru_cache(maxsize=maxsize)(func)
        cache_expiry = {}

        @functools.wraps(func)
        def wrapped(*args, **kwargs):
            key = args + tuple(sorted(kwargs.items()))
            now = time.time()
            if key in cache_expiry and now - cache_expiry[key] > seconds:
                cache.cache_clear()
            cache_expiry[key] = now
            return cache(*args, **kwargs)

        return wrapped
    return decorator

@timed_lru_cache(seconds=5)
def expensive_function(x):
    print(f"Calculating for {x}")
    return x * x
